# Copyright 2019 Anatole Tresch
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -*- mode: ruby -*-
# vi: set ft=ruby :

servers = [
{{if .MasterConfig}}
{{with .MasterConfig}}
        {
            :name => "{{.NodeName}}",
            :type => "master",
            :box => "{{.NodeBox}}",
            :box_version => "{{.NodeBoxVersion}}",
            :ip => "{{.NodeAddressInternal}}",
            :mem => "{{.NodeMMemory}}",
            :cpu => "{{.NodeMCpu}}",
            :network => "{{.NodeNetType.String}}"
        },
{{end}}
{{end}}
{{if .WorkerConfig}}
{{with .WorkerConfig}}
        {
            :name => "{{.NodeName}}",
            :type => "worker",
            :box => "{{.NodeBox}}",
            :box_version => "{{.NodeBoxVersion}}",
            :ip => "{{.NodeAddressInternal}}",
            :mem => "{{.NodeMMemory}}",
            :cpu => "{{.NodeMCpu}}",
            :network => "{{.NodeNetType.String}}"
        },
{{end}}
{{end}}
]

# This script to install k8s using kubeadm will get executed after a box is provisioned
$configureBox = <<-SCRIPT

	apt-get -y update

    echo "Enable br_netfilter"
    echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

    echo "install Docker..."
    ## Set up the repository:
    ### Install packages to allow apt to use a repository over HTTPS
    apt-get -y update && apt-get -y install apt-transport-https ca-certificates curl software-properties-common

    ### Add Dockerâ€™s official GPG key
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

    ### Add Docker apt repository.
    add-apt-repository \
      "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) \
      stable"

    ## Install Docker CE.
    apt-get -y update && apt-get -y install docker-ce=18.06.2~ce~3-0~ubuntu

    mkdir -p /etc/systemd/system/docker.service.d

    # Restart docker.
    systemctl daemon-reload
    systemctl restart docker

    systemctl daemon-reload
    systemctl enable docker
    sed -i '/^ExecStart/ s/$/ --exec-opt native.cgroupdriver=systemd/' /usr/lib/systemd/system/docker.service
    systemctl start docker

    # run docker commands as vagrant user (sudo not required)
    usermod -aG docker vagrant

    echo "install kubeadm..."
    apt-get -y install apt-transport-https curl
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
    deb http://apt.kubernetes.io/ kubernetes-xenial main
	
EOF
    apt-get -y update
    apt-get -y install kubelet kubeadm kubectl
    apt-mark hold kubelet kubeadm kubectl

    echo "Enable br_netfilter"
    echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

    # kubelet requires swap off
    swapoff -a
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

	# Turn on iptables bridge calls
	echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf
    sudo sysctl -p


    sudo systemctl restart kubelet

    echo "**** Network Config: ****"
    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`
    echo $(IP_ADDR)

SCRIPT

$configureMaster = <<-SCRIPT
    echo "Starting Kubernetes master..."
    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`
    kubeadm init --apiserver-advertise-address=$(IP_ADDR) --pod-network-cidr={{.PodNetCIDR}} {{ if .NetCIDR}}--service-cidr={{.NetCIDR}} {{end}} --apiserver-bind-port={{.ApiServerBindPort}} --service-dns-domain={{.ServiceDNSDomain}}

    echo "Initializing kubectl..."
    # copying credentials to regular user - vagrant
    sudo --user=vagrant mkdir -p /home/vagrant/.kube
    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config

    export KUBECONFIG=/etc/kubernetes/admin.conf

    # echo "Installing Calico pod network addonr..."
    # kubectl apply -f https://raw.githubusercontent.com/ecomm-integration-ballerina/kubernetes-cluster/master/calico/rbac-kdd.yaml
    # kubectl apply -f https://raw.githubusercontent.com/ecomm-integration-ballerina/kubernetes-cluster/master/calico/calico.yaml

    echo "Installing Flannel..."
    kubectl convert -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml | kubectl create -f -:q:

    echo "Creating Kubernetes Join Token..."
    kubeadm token create >> /etc/kubeadm_join_token
    cp /etc/kubeadm_join_token /home/vagrant/token/kubeadm_join_token
    kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh
    cp /etc/kubeadm_join_cmd.sh /home/vagrant/token/kubeadm_join_cmd.sh
    chmod +x /etc/kubeadm_join_cmd.sh

    # required for setting up password less ssh between guest VMs
    sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
    sudo service sshd restart

    echo "Checking Kubernetes state..."
    echo $(kubectl get nodes)
    echo "Kubernetes master started."
SCRIPT

$configureWorker = <<-SCRIPT
    echo "Starting Kubernetes Worker..."
    echo "Joining Kubernetes cluster..."
    # Join cluster, file should be mapped from host
    {{ if .IsLocalController}}
    chmod +x /home/vagrant/token/kubeadm_join_cmd.sh
    sh /home/vagrant/token/kubeadm_join_cmd.sh
    {{else}}
    sudo kubeadm join {{.PublicMaster}} {{.MasterToken}}
    {{end}}
    # chmod +x /home/vagrant/token/kubeadm_join_cmd.sh
    # sh /home/vagrant/token/kubeadm_join_cmd.sh
    # sudo kubeadm join $some_ip:6443 --token $some_token --discovery-token-ca-cert-hash $some_hash

    echo "Kubernetes worker started."
SCRIPT

$configureAnsible = <<-SCRIPT
    echo "Installing Ansible...-"
	# Install ansible
	sudo apt-get -y install software-properties-common
	sudo apt-add-repository ppa:ansible/ansible
	sudo apt-get -y update
	sudo apt-get -y install ansible
    sudo ansible-galaxy install ahuffman.hosts
	sudo chmod 775 /vagrant
	sudo chmod 775 /home/vagrant
	sudo chmod 775 /home/vagrant/ansible
SCRIPT

Vagrant.configure("2") do |config|

    servers.each do |opts|
        config.vm.define opts[:name] do |config|
            config.vm.box = opts[:box]
            config.vm.box_version = opts[:box_version]
            config.vm.hostname = opts[:name]
            if opts[:network] == "NAT"
                config.vm.network "public_network", ip: opts[:ip]
            end
            if opts[:network] == "Bridged"
                config.vm.network "public_network", bridge: {{ .HostInterface}}, ip: opts[:ip], use_dhcp_assigned_default_route: true
            end
			config.vm.synced_folder "./ansible", "/home/vagrant/ansible",  mount_options: ["dmode=775"]
			config.vm.synced_folder "./token", "/home/vagrant/token",  mount_options: ["dmode=775"]

            config.vm.provider "virtualbox" do |v|

                v.name = opts[:name]
            	v.customize ["modifyvm", :id, "--groups", "/WinKube"]
                v.customize ["modifyvm", :id, "--memory", opts[:mem]]
                v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]

            end

            # we cannot use this because we can't install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871
            #config.vm.provision "docker"
			config.vm.provision "shell", inline: $configureAnsible
			config.vm.provision "shell", inline: $configureBox
			
            if opts[:type] == "master"
                if opts[:network] == "NAT"
                    # when using NAT we have to forward the relevant Kubernetes Master ports.
                    config.vm.network :forwarded_port, guest: {{.ApiServerBindPort}}, host: {{.ApiServerBindPort}}
                end
                config.vm.provision "shell", inline: $configureMaster
				# config.vm.provision "ansible_local" do |ansible|
				#   ansible.install        = false
				#   ansible.become        = true
				#   ansible.compatibility_mode = "auto"
				#   # ansible.limit          = "all"
				#   ansible.playbook = "config/master.yml"
			    # end
            else if opts[:type] == "worker"
                if opts[:network] == "NAT"
                    # when using NAT we have to forward the relevant Kubernetes Worker ports.
                    config.vm.network :forwarded_port, guest: 4149, host: 4149
                    config.vm.network :forwarded_port, guest: 10250, host: 10250
                    config.vm.network :forwarded_port, guest: 10255, host: 10255
                    config.vm.network :forwarded_port, guest: 10256, host: 10256
                    config.vm.network :forwarded_port, guest: 9099, host: 9099     # calico
                    config.vm.network :forwarded_port, guest: 8285, host: 8285     # flannel
                end
                config.vm.provision "shell", inline: $configureWorker
				# config.vm.provision "ansible_local" do |ansible|
				#   ansible.install        = false
				#   ansible.become        = true
				#   ansible.compatibility_mode = "auto"
				#   # ansible.limit          = "all"
				#   ansible.playbook = "config/node.yml"
			    # end
            end
        end
    end
end
end