# Copyright 2019 Anatole Tresch
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -*- mode: ruby -*-
# vi: set ft=ruby :

servers = [
{{with .NodeConfig}}
    {{if eq .NodeType.String "MasterNode"}}
        {
            :name => "{{.Name}}",
            :type => "master",
            :box => "{{.Box}}",
            :box_version => "{{.BoxVersion}}",
            :ip => "{{.Ip}}",
            :mem => "{{.Memory}}",
            :cpu => "{{.Cpu}}"
        },
    {{end}}
    {{ if eq .NodeType.String "WorkerNode" }}
        {
                :name => "{{.Name}}",
                :type => "worker",
                :box => "{{.Box}}",
                :box_version => "{{.BoxVersion}}",
                :ip => "{{.Ip}}",
                :mem => "{{.Memory}}",
                :cpu => "{{.Cpu}}"
            }
    {{end}}
{{end}}
]

# This script to install k8s using kubeadm will get executed after a box is provisioned
$configureBox = <<-SCRIPT

	apt-get update

    # install docker v17.03
    # reason for not using docker provision is that it always installs latest version of the docker, but kubeadm requires 17.03 or older
    
    apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    add-apt-repository "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable"
    apt-get update && apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')

    # run docker commands as vagrant user (sudo not required)
                                  usermod -aG docker vagrant

    # install kubeadm
    apt-get install -y apt-transport-https curl
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
    deb http://apt.kubernetes.io/ kubernetes-xenial main
	
EOF
    apt-get update
    apt-get install -y kubelet kubeadm kubectl
    apt-mark hold kubelet kubeadm kubectl

    # kubelet requires swap off
    swapoff -a

    # keep swap off after reboot
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    # ip of this box
    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`
	
    # set node-ip
    sudo sed -i "/^[^#]*KUBELET_EXTRA_ARGS=/c\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR" /etc/default/kubelet
    sudo systemctl restart kubelet
SCRIPT

$configureMaster = <<-SCRIPT
    echo "This is master"
    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`
    
    # install k8s master
    HOST_NAME=$(hostname -s)
    # removed: --apiserver-cert-extra-sans=$IP_ADDR
    kubeadm init --apiserver-advertise-address=$IP_ADDR --node-name {{.NodeConfig.Name}} --pod-network-cidr={{.PodNetCIDR}} {{ if .ServiceNetCIDR}}--service-network-cidr={{.ServiceNetCIDR}} {{end}} --apiserver-bind-port={{.ApiServerBindPort}} --service-dns-domain={{.ServiceDNSDomain}}

    # copying credentials to regular user - vagrant
    sudo --user=vagrant mkdir -p /home/vagrant/.kube
    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config

    # install Calico pod network addon
    export KUBECONFIG=/etc/kubernetes/admin.conf
    kubectl apply -f https://raw.githubusercontent.com/ecomm-integration-ballerina/kubernetes-cluster/master/calico/rbac-kdd.yaml
    kubectl apply -f https://raw.githubusercontent.com/ecomm-integration-ballerina/kubernetes-cluster/master/calico/calico.yaml

    kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh
    chmod +x /etc/kubeadm_join_cmd.sh

    # required for setting up password less ssh between guest VMs
    sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
    sudo service sshd restart
    {{ if eq .NetType.String "NAT" }}
    # when using NAT/port forwarding instead of bridged mode:
    config.vm.network :forwarded_port, guest: {{.ApiServerBindPort}}, host: {{.ApiServerBindPort}}
    {{end}}
SCRIPT

$configureNode = <<-SCRIPT
    echo "This is worker"
    apt-get install -y sshpass
    sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .
    sh ./kubeadm_join_cmd.sh
    # when using NAT/port forwarding instead of bridged mode:
     {{ if eq .NetType.String "NAT" }}
    config.vm.network :forwarded_port, guest: 10250, host: 10250
    for i in 30000..32767
        config.vm.network :forwarded_port, guest: i, host: i
    end
    {{end}}
SCRIPT

$configureAnsible = <<-SCRIPT
    echo "Installing Ansible...-"
	# Install ansible
	sudo apt-get -y install software-properties-common
	sudo apt-add-repository ppa:ansible/ansible
	sudo apt-get update
	sudo apt-get -y install ansible
    sudo ansible-galaxy install ahuffman.hosts
	sudo chmod 775 /vagrant
	sudo chmod 775 /home/vagrant
	sudo chmod 775 /home/vagrant/ansible
SCRIPT

Vagrant.configure("2") do |config|

    servers.each do |opts|
        config.vm.define opts[:name] do |config|
            config.vm.box = opts[:box]
            config.vm.box_version = opts[:box_version]
            config.vm.hostname = opts[:name]
 {{ if eq .NetType.String "NAT" }}
            config.vm.network "private_network"
              virtualbox__intnet: "WinKubeNet", ip: opts[:ip]
{{end}}
 {{ if eq .NetType.String "Bridge" }}
            config.vm.network "public_network", bridge: {{ .BridgeInterface}}, ip: opts[:ip], use_dhcp_assigned_default_route: true
{{end}}
			config.vm.synced_folder "./ansible", "/home/vagrant/ansible",  mount_options: ["dmode=775"]

            config.vm.provider "virtualbox" do |v|

                v.name = opts[:name]
            	v.customize ["modifyvm", :id, "--groups", "/WinKube"]
                v.customize ["modifyvm", :id, "--memory", opts[:mem]]
                v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]

            end

            # we cannot use this because we can't install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871
            #config.vm.provision "docker"
			config.vm.provision "shell", inline: $configureAnsible
			config.vm.provision "shell", inline: $configureBox
			
            if opts[:type] == "master"
                config.vm.provision "shell", inline: $configureMaster
				config.vm.provision "ansible_local" do |ansible|
				  ansible.install        = false
				  ansible.become        = true
				  ansible.compatibility_mode = "auto"
				  # ansible.limit          = "all"
				  ansible.playbook = "config/master.yml"
			    end
            else
                config.vm.provision "shell", inline: $configureNode
				config.vm.provision "ansible_local" do |ansible|
				  ansible.install        = false
				  ansible.become        = true
				  ansible.compatibility_mode = "auto"
				  # ansible.limit          = "all"
				  ansible.playbook = "config/node.yml"
			    end
            end
        end
    end
end